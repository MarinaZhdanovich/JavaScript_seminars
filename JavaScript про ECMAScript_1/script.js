// Создайте функцию mergeArrays, которая принимает два
// массива и возвращает новый массив, содержащий все
// элементы из обоих массивов. Используйте spread
// оператор для объединения массивов.
// mergeArrays([1, 2, 3], [4, 5, 6]); // Ожидаемый результат: [1,
// 2, 3, 4, 5, 6]

function mergeArrays(array1, array2) {
  return [...array1, ...array2]
};


const mergeArrays = (array1, array2) => [...array1, ...array2]

console.log(mergeArrays([1, 2, 3], [4, 5, 6]));


// 2. Создайте функцию removeDuplicates, которая принимает
// любое количество аргументов и возвращает новый
// массив, содержащий только уникальные значения.
// Используйте rest оператор для сбора всех аргументов в
// массив а затем filter для определения дубликатов.
// removeDuplicates(1, 2, 3, 2, 4, 1, 5); // Ожидаемый
// результат: [1, 2, 3, 4, 5]
function removeDuplicates(...args) {
  return args.filter((value, index) => args.indexOf(value) === index);
}

//filter создает новый массив, включающий только те элементы, которые удовлетворяют определенному условию.

// args.indexOf(value) возвращает первый индекс, по которому элемент value встречается в массиве args.
// Если этот индекс совпадает с текущим индексом index, это означает, что элемент value встречается в массиве первый раз.

// args будет [1, 2, 3, 2, 4, 1, 5].
// Метод filter проходит по каждому элементу массива.
// Для элемента 1 в первом случае args.indexOf(1) возвращает 0, который равен текущему индексу 0. Значит, 1 включается в новый массив.
// Для элемента 2 в следующем случае args.indexOf(2) возвращает 1, который равен текущему индексу 1. Значит, 2 включается в новый массив.
// Когда filter встречает второй 2, args.indexOf(2) возвращает 1, который не равен текущему индексу 3, поэтому второй 2 игнорируется.
// Функция продолжает этот процесс для всех элементов, в результате чего новый массив содержит только уникальные значения [1, 2, 3, 4, 5].